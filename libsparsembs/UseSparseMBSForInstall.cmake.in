## Generated by CMAKE from UseSparseMBSForInstall.cmake.in file !!
##
## UseSparseMBS.cmake is included by the SparseMBSConfig.cmake from the install dir.
## It allow to find SparseMBS for another project.
## When find_package(SparseMBS) is used in another project,
## SparseMBSConfig.cmake is found from the SparseMBS_DIR (the install dir).
##
## This file do some things for you (and according metis is build or not): 
##   * he set the link_directories (with SparseMBS_LIB_DIRS) where we can find all libraries
##   * he set the include_directories (with SparseMBS_INCLUDE_DIRS) where we can find all headers files
##
## This file provide :
##	 * The name of the SparseMBS targets as IMPORTED (so you can use directly the name of the target for target_link_libraries(...))
##   * SparseMBS_LIBRARIES : an "all in one" help cmake variable, which contain all libraries for use SparseMBS  for target_link_libraries(...)
##   On windows:
##   * SparseMBS_LAPACK_BLAS_LIBRARIES: which contain the libblas and liblapack libraries
##   * SparseMBS_LAPACK_BLAS_DLL		: which contain all requiered binaries for use libblas and liblapack
##
## OPT (win): Given the cmake flag : set(SparseMBS_USE_LAPACK_BLAS ON)
## before using the Find_package(SparseMBS) instruction,
## will set (for windows only) the link for liblapack and libblas
##
## Created by jesnault (jerome.esnault@inria.fr) 2014-01-21
## Updated by jesnault (jerome.esnault@inria.fr) 2014-01-21

## get the root path (install dir)
get_filename_component(SparseMBS_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)

## libs
set(SparseMBS_LIBRARIES 	"")
set(SparseMBS_LIB_DIR 	"${SparseMBS_DIR}/lib@LIB_POSTFIX@")

set(SparseMBS_LIB_DIRS 	"${SparseMBS_LIB_DIR}")
link_directories(${SparseMBS_LIB_DIRS})

set(SparseMBS_CMAKE_CONFIG "${SparseMBS_DIR}/cmake/SparseMBS-config@LIB_POSTFIX@.cmake")
if(EXISTS "${SparseMBS_CMAKE_CONFIG}")

	## From SparseMBS project => the install EXPORT cmd => cmake provide all imported target
	include(${SparseMBS_CMAKE_CONFIG})
	
	## libs (get from the export cmake file) => in order to fill the SparseMBS_LIBRARIES
	file(READ "${SparseMBS_CMAKE_CONFIG}" SparseMBSConfigContent)
	STRING(REGEX REPLACE "\r?\n" ";" SparseMBSConfigContent "${SparseMBSConfigContent}")
	foreach(line ${SparseMBSConfigContent})
		string(REGEX MATCH "ADD_LIBRARY\\(.* SHARED IMPORTED" sharedMatchedUC ${line})
		string(REGEX MATCH "add_library\\(.* SHARED IMPORTED" sharedMatched ${line})
		if( sharedMatchedUC )
			string(REGEX REPLACE "ADD_LIBRARY\\((.*) SHARED IMPORTED" "\\1" libName ${sharedMatchedUC})
			list(APPEND SparseMBS_LIBRARIES ${libName}) # the final cmake variable other project can use
		elseif( sharedMatched )
			string(REGEX REPLACE "add_library\\((.*) SHARED IMPORTED" "\\1" libName ${sharedMatched})
			list(APPEND SparseMBS_LIBRARIES ${libName}) # the final cmake variable other project can use
		endif()
		
		string(REGEX MATCH "ADD_LIBRARY\\(.* STATIC IMPORTED" staticMatchedUC ${line})
		string(REGEX MATCH "add_library\\(.* STATIC IMPORTED" staticMatched ${line})
		if( staticMatchedUC )
			string(REGEX REPLACE "ADD_LIBRARY\\((.*) STATIC IMPORTED" "\\1" libName ${staticMatchedUC})
			list(APPEND SparseMBS_LIBRARIES ${libName}) # the final cmake variable other project can use
		elseif( staticMatched )
			string(REGEX REPLACE "add_library\\((.*) STATIC IMPORTED" "\\1" libName ${staticMatched})
			list(APPEND SparseMBS_LIBRARIES ${libName}) # the final cmake variable other project can use
		endif()
	endforeach()
	
else()
	message(WARNING "${SparseMBS_CMAKE_CONFIG} not found...\n Can't fill SparseMBS_LIBRARIES...\n set SparseMBS_DIR cmake variable to the dir we can find this file.")
endif()

set(SparseMBS_INCLUDE_DIR  "${SparseMBS_DIR}/include/sparsembs")
set(SparseMBS_INCLUDE_DIRS "${SparseMBS_INCLUDE_DIR}" )
include_directories(${SparseMBS_INCLUDE_DIRS})

